// MD5 SUPPORT
!function(n){"use strict";function t(n,t){var r=(65535&n)+(65535&t);return(n>>16)+(t>>16)+(r>>16)<<16|65535&r}function r(n,t){return n<<t|n>>>32-t}function e(n,e,o,u,c,f){return t(r(t(t(e,n),t(u,f)),c),o)}function o(n,t,r,o,u,c,f){return e(t&r|~t&o,n,t,u,c,f)}function u(n,t,r,o,u,c,f){return e(t&o|r&~o,n,t,u,c,f)}function c(n,t,r,o,u,c,f){return e(t^r^o,n,t,u,c,f)}function f(n,t,r,o,u,c,f){return e(r^(t|~o),n,t,u,c,f)}function i(n,r){n[r>>5]|=128<<r%32,n[14+(r+64>>>9<<4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e<n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]}function a(n){var t,r="",e=32*n.length;for(t=0;t<e;t+=8)r+=String.fromCharCode(n[t>>5]>>>t%32&255);return r}function d(n){var t,r=[];for(r[(n.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t<e;t+=8)r[t>>5]|=(255&n.charCodeAt(t/8))<<t%32;return r}function h(n){return a(i(d(n),8*n.length))}function l(n,t){var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length>16&&(o=i(o,8*n.length)),r=0;r<16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))}function g(n){var t,r,e="";for(r=0;r<n.length;r+=1)t=n.charCodeAt(r),e+="0123456789abcdef".charAt(t>>>4&15)+"0123456789abcdef".charAt(15&t);return e}function v(n){return unescape(encodeURIComponent(n))}function m(n){return h(v(n))}function p(n){return g(m(n))}function s(n,t){return l(v(n),v(t))}function C(n,t){return g(s(n,t))}function A(n,t,r){return t?r?s(t,n):C(t,n):r?m(n):p(n)}"function"==typeof define&&define.amd?define(function(){return A}):"object"==typeof module&&module.exports?module.exports=A:n.md5=A}(this);
// PIXELAES SUPPORT
!(function(e,r){"object"==typeof exports?module.exports=r():"function"==typeof define&&define.amd?define(r):e.PixelAES=r()})(this,function(){"use strict";var e=14,r=8,n=!1,f=function(e){try{return unescape(encodeURIComponent(e))}catch(r){throw"Error on UTF-8 encode"}},c=function(e){try{return decodeURIComponent(escape(e))}catch(r){throw"Bad Key"}},t=function(e){var r,n,f=[];for(16>e.length&&(r=16-e.length,f=[r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r]),n=0;e.length>n;n++)f[n]=e[n];return f},a=function(e,r){var n,f,c="";if(r){if(n=e[15],n>16)throw"Decryption error: Maybe bad key";if(16===n)return"";for(f=0;16-n>f;f++)c+=String.fromCharCode(e[f])}else for(f=0;16>f;f++)c+=String.fromCharCode(e[f]);return c},o=function(e){var r,n="";for(r=0;e.length>r;r++)n+=(16>e[r]?"0":"")+e[r].toString(16);return n},d=function(e){var r=[];return e.replace(/(..)/g,function(e){r.push(parseInt(e,16))}),r},u=function(e,r){var n,c=[];for(r||(e=f(e)),n=0;e.length>n;n++)c[n]=e.charCodeAt(n);return c},i=function(n){switch(n){case 128:e=10,r=4;break;case 192:e=12,r=6;break;case 256:e=14,r=8;break;default:throw"Invalid Key Size Specified:"+n}},b=function(e){var r,n=[];for(r=0;e>r;r++)n=n.concat(Math.floor(256*Math.random()));return n},h=function(n,f){var c,t=e>=12?3:2,a=[],o=[],d=[],u=[],i=n.concat(f);for(d[0]=L(i),u=d[0],c=1;t>c;c++)d[c]=L(d[c-1].concat(i)),u=u.concat(d[c]);return a=u.slice(0,4*r),o=u.slice(4*r,4*r+16),{key:a,iv:o}},l=function(e,r,n){r=S(r);var f,c=Math.ceil(e.length/16),a=[],o=[];for(f=0;c>f;f++)a[f]=t(e.slice(16*f,16*f+16));for(0===e.length%16&&(a.push([16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]),c++),f=0;a.length>f;f++)a[f]=0===f?x(a[f],n):x(a[f],o[f-1]),o[f]=s(a[f],r);return o},v=function(e,r,n,f){r=S(r);var t,o=e.length/16,d=[],u=[],i="";for(t=0;o>t;t++)d.push(e.slice(16*t,16*(t+1)));for(t=d.length-1;t>=0;t--)u[t]=p(d[t],r),u[t]=0===t?x(u[t],n):x(u[t],d[t-1]);for(t=0;o-1>t;t++)i+=a(u[t]);return i+=a(u[t],!0),f?i:c(i)},s=function(r,f){n=!1;var c,t=M(r,f,0);for(c=1;e+1>c;c++)t=g(t),t=y(t),e>c&&(t=k(t)),t=M(t,f,c);return t},p=function(r,f){n=!0;var c,t=M(r,f,e);for(c=e-1;c>-1;c--)t=y(t),t=g(t),t=M(t,f,c),c>0&&(t=k(t));return t},g=function(e){var r,f=n?D:B,c=[];for(r=0;16>r;r++)c[r]=f[e[r]];return c},y=function(e){var r,f=[],c=n?[0,13,10,7,4,1,14,11,8,5,2,15,12,9,6,3]:[0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11];for(r=0;16>r;r++)f[r]=e[c[r]];return f},k=function(e){var r,f=[];if(n)for(r=0;4>r;r++)f[4*r]=F[e[4*r]]^R[e[1+4*r]]^j[e[2+4*r]]^z[e[3+4*r]],f[1+4*r]=z[e[4*r]]^F[e[1+4*r]]^R[e[2+4*r]]^j[e[3+4*r]],f[2+4*r]=j[e[4*r]]^z[e[1+4*r]]^F[e[2+4*r]]^R[e[3+4*r]],f[3+4*r]=R[e[4*r]]^j[e[1+4*r]]^z[e[2+4*r]]^F[e[3+4*r]];else for(r=0;4>r;r++)f[4*r]=E[e[4*r]]^U[e[1+4*r]]^e[2+4*r]^e[3+4*r],f[1+4*r]=e[4*r]^E[e[1+4*r]]^U[e[2+4*r]]^e[3+4*r],f[2+4*r]=e[4*r]^e[1+4*r]^E[e[2+4*r]]^U[e[3+4*r]],f[3+4*r]=U[e[4*r]]^e[1+4*r]^e[2+4*r]^E[e[3+4*r]];return f},M=function(e,r,n){var f,c=[];for(f=0;16>f;f++)c[f]=e[f]^r[n][f];return c},x=function(e,r){var n,f=[];for(n=0;16>n;n++)f[n]=e[n]^r[n];return f},S=function(n){var f,c,t,a,o=[],d=[],u=[];for(f=0;r>f;f++)c=[n[4*f],n[4*f+1],n[4*f+2],n[4*f+3]],o[f]=c;for(f=r;4*(e+1)>f;f++){for(o[f]=[],t=0;4>t;t++)d[t]=o[f-1][t];for(0===f%r?(d=m(w(d)),d[0]^=K[f/r-1]):r>6&&4===f%r&&(d=m(d)),t=0;4>t;t++)o[f][t]=o[f-r][t]^d[t]}for(f=0;e+1>f;f++)for(u[f]=[],a=0;4>a;a++)u[f].push(o[4*f+a][0],o[4*f+a][1],o[4*f+a][2],o[4*f+a][3]);return u},m=function(e){for(var r=0;4>r;r++)e[r]=B[e[r]];return e},w=function(e){var r,n=e[0];for(r=0;4>r;r++)e[r]=e[r+1];return e[3]=n,e},A=function(e,r){var n,f=[];for(n=0;e.length>n;n+=r)f[n/r]=parseInt(e.substr(n,r),16);return f},C=function(e){var r,n=[];for(r=0;e.length>r;r++)n[e[r]]=r;return n},I=function(e,r){var n,f;for(f=0,n=0;8>n;n++)f=1===(1&r)?f^e:f,e=e>127?283^e<<1:e<<1,r>>>=1;return f},O=function(e){var r,n=[];for(r=0;256>r;r++)n[r]=I(e,r);return n},B=A("637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16",2),D=C(B),K=A("01020408102040801b366cd8ab4d9a2f5ebc63c697356ad4b37dfaefc591",2),E=O(2),U=O(3),z=O(9),R=O(11),j=O(13),F=O(14),G=function(e,r,n){var f,c=b(8),t=h(u(r,n),c),a=t.key,o=t.iv,d=[[83,97,108,116,101,100,95,95].concat(c)];return e=u(e,n),f=l(e,a,o),f=d.concat(f),T.encode(f)},H=function(e,r,n){var f=T.decode(e),c=f.slice(8,16),t=h(u(r,n),c),a=t.key,o=t.iv;return f=f.slice(16,f.length),e=v(f,a,o,n)},L=function(e){function r(e,r){return e<<r|e>>>32-r}function n(e,r){var n,f,c,t,a;return c=2147483648&e,t=2147483648&r,n=1073741824&e,f=1073741824&r,a=(1073741823&e)+(1073741823&r),n&f?2147483648^a^c^t:n|f?1073741824&a?3221225472^a^c^t:1073741824^a^c^t:a^c^t}function f(e,r,n){return e&r|~e&n}function c(e,r,n){return e&n|r&~n}function t(e,r,n){return e^r^n}function a(e,r,n){return r^(e|~n)}function o(e,c,t,a,o,d,u){return e=n(e,n(n(f(c,t,a),o),u)),n(r(e,d),c)}function d(e,f,t,a,o,d,u){return e=n(e,n(n(c(f,t,a),o),u)),n(r(e,d),f)}function u(e,f,c,a,o,d,u){return e=n(e,n(n(t(f,c,a),o),u)),n(r(e,d),f)}function i(e,f,c,t,o,d,u){return e=n(e,n(n(a(f,c,t),o),u)),n(r(e,d),f)}function b(e){for(var r,n=e.length,f=n+8,c=(f-f%64)/64,t=16*(c+1),a=[],o=0,d=0;n>d;)r=(d-d%4)/4,o=8*(d%4),a[r]=a[r]|e[d]<<o,d++;return r=(d-d%4)/4,o=8*(d%4),a[r]=a[r]|128<<o,a[t-2]=n<<3,a[t-1]=n>>>29,a}function h(e){var r,n,f=[];for(n=0;3>=n;n++)r=255&e>>>8*n,f=f.concat(r);return f}var l,v,s,p,g,y,k,M,x,S=[],m=A("67452301efcdab8998badcfe10325476d76aa478e8c7b756242070dbc1bdceeef57c0faf4787c62aa8304613fd469501698098d88b44f7afffff5bb1895cd7be6b901122fd987193a679438e49b40821f61e2562c040b340265e5a51e9b6c7aad62f105d02441453d8a1e681e7d3fbc821e1cde6c33707d6f4d50d87455a14eda9e3e905fcefa3f8676f02d98d2a4c8afffa39428771f6816d9d6122fde5380ca4beea444bdecfa9f6bb4b60bebfbc70289b7ec6eaa127fad4ef308504881d05d9d4d039e6db99e51fa27cf8c4ac5665f4292244432aff97ab9423a7fc93a039655b59c38f0ccc92ffeff47d85845dd16fa87e4ffe2ce6e0a30143144e0811a1f7537e82bd3af2352ad7d2bbeb86d391",8);for(S=b(e),y=m[0],k=m[1],M=m[2],x=m[3],l=0;S.length>l;l+=16)v=y,s=k,p=M,g=x,y=o(y,k,M,x,S[l+0],7,m[4]),x=o(x,y,k,M,S[l+1],12,m[5]),M=o(M,x,y,k,S[l+2],17,m[6]),k=o(k,M,x,y,S[l+3],22,m[7]),y=o(y,k,M,x,S[l+4],7,m[8]),x=o(x,y,k,M,S[l+5],12,m[9]),M=o(M,x,y,k,S[l+6],17,m[10]),k=o(k,M,x,y,S[l+7],22,m[11]),y=o(y,k,M,x,S[l+8],7,m[12]),x=o(x,y,k,M,S[l+9],12,m[13]),M=o(M,x,y,k,S[l+10],17,m[14]),k=o(k,M,x,y,S[l+11],22,m[15]),y=o(y,k,M,x,S[l+12],7,m[16]),x=o(x,y,k,M,S[l+13],12,m[17]),M=o(M,x,y,k,S[l+14],17,m[18]),k=o(k,M,x,y,S[l+15],22,m[19]),y=d(y,k,M,x,S[l+1],5,m[20]),x=d(x,y,k,M,S[l+6],9,m[21]),M=d(M,x,y,k,S[l+11],14,m[22]),k=d(k,M,x,y,S[l+0],20,m[23]),y=d(y,k,M,x,S[l+5],5,m[24]),x=d(x,y,k,M,S[l+10],9,m[25]),M=d(M,x,y,k,S[l+15],14,m[26]),k=d(k,M,x,y,S[l+4],20,m[27]),y=d(y,k,M,x,S[l+9],5,m[28]),x=d(x,y,k,M,S[l+14],9,m[29]),M=d(M,x,y,k,S[l+3],14,m[30]),k=d(k,M,x,y,S[l+8],20,m[31]),y=d(y,k,M,x,S[l+13],5,m[32]),x=d(x,y,k,M,S[l+2],9,m[33]),M=d(M,x,y,k,S[l+7],14,m[34]),k=d(k,M,x,y,S[l+12],20,m[35]),y=u(y,k,M,x,S[l+5],4,m[36]),x=u(x,y,k,M,S[l+8],11,m[37]),M=u(M,x,y,k,S[l+11],16,m[38]),k=u(k,M,x,y,S[l+14],23,m[39]),y=u(y,k,M,x,S[l+1],4,m[40]),x=u(x,y,k,M,S[l+4],11,m[41]),M=u(M,x,y,k,S[l+7],16,m[42]),k=u(k,M,x,y,S[l+10],23,m[43]),y=u(y,k,M,x,S[l+13],4,m[44]),x=u(x,y,k,M,S[l+0],11,m[45]),M=u(M,x,y,k,S[l+3],16,m[46]),k=u(k,M,x,y,S[l+6],23,m[47]),y=u(y,k,M,x,S[l+9],4,m[48]),x=u(x,y,k,M,S[l+12],11,m[49]),M=u(M,x,y,k,S[l+15],16,m[50]),k=u(k,M,x,y,S[l+2],23,m[51]),y=i(y,k,M,x,S[l+0],6,m[52]),x=i(x,y,k,M,S[l+7],10,m[53]),M=i(M,x,y,k,S[l+14],15,m[54]),k=i(k,M,x,y,S[l+5],21,m[55]),y=i(y,k,M,x,S[l+12],6,m[56]),x=i(x,y,k,M,S[l+3],10,m[57]),M=i(M,x,y,k,S[l+10],15,m[58]),k=i(k,M,x,y,S[l+1],21,m[59]),y=i(y,k,M,x,S[l+8],6,m[60]),x=i(x,y,k,M,S[l+15],10,m[61]),M=i(M,x,y,k,S[l+6],15,m[62]),k=i(k,M,x,y,S[l+13],21,m[63]),y=i(y,k,M,x,S[l+4],6,m[64]),x=i(x,y,k,M,S[l+11],10,m[65]),M=i(M,x,y,k,S[l+2],15,m[66]),k=i(k,M,x,y,S[l+9],21,m[67]),y=n(y,v),k=n(k,s),M=n(M,p),x=n(x,g);return h(y).concat(h(k),h(M),h(x))},T=function(){var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=e.split(""),n=function(e){var n,f,c=[],t="";for(Math.floor(16*e.length/3),n=0;16*e.length>n;n++)c.push(e[Math.floor(n/16)][n%16]);for(n=0;c.length>n;n+=3)t+=r[c[n]>>2],t+=r[(3&c[n])<<4|c[n+1]>>4],t+=void 0!==c[n+1]?r[(15&c[n+1])<<2|c[n+2]>>6]:"=",t+=void 0!==c[n+2]?r[63&c[n+2]]:"=";for(f=t.slice(0,64)+"\n",n=1;Math.ceil(t.length/64)>n;n++)f+=t.slice(64*n,64*n+64)+(Math.ceil(t.length/64)===n+1?"":"\n");return f},f=function(r){r=r.replace(/\n/g,"");var n,f=[],c=[],t=[];for(n=0;r.length>n;n+=4)c[0]=e.indexOf(r.charAt(n)),c[1]=e.indexOf(r.charAt(n+1)),c[2]=e.indexOf(r.charAt(n+2)),c[3]=e.indexOf(r.charAt(n+3)),t[0]=c[0]<<2|c[1]>>4,t[1]=(15&c[1])<<4|c[2]>>2,t[2]=(3&c[2])<<6|c[3],f.push(t[0],t[1],t[2]);return f=f.slice(0,f.length-f.length%16)};return"function"==typeof Array.indexOf&&(e=r),{encode:n,decode:f}}();return{size:i,h2a:d,expandKey:S,encryptBlock:s,decryptBlock:p,Decrypt:n,s2a:u,rawEncrypt:l,rawDecrypt:v,dec:H,openSSLKey:h,a2h:o,enc:G,Hash:{MD5:L},Base64:T}});
// BASE64 SUPPORT
var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}};

var _strings = {
	es: {
		'close': 'Cerrar',
		'terms': 'Términos y Condiciones',
		'success_payment': 'Su pago fue procesado exitosamente!',
		'agree_terms': 'Acepto los <a href="#" data-terms>Términos y Condiciones</a>',
		'focus_cnumber': 'Ingrese su numero de tarjeta',
		'error_cnumber': 'El numero de tarjeta esta incompleto',
		'invalid_cnumber': 'La tarjeta ingresada es invalida',
		'banned_cnumber': 'El comercio no permite este tipo de tarjeta',
		'placeholder_cnumber': 'NUMERO DE TARJETA',
		'focus_expiry': 'Ingrese la fecha de expiración' ,
		'error_expiry': 'La fecha de expiración es invalida',
		'placeholder_expiry': 'MM - AA',
		'focus_cvv': 'Ingrese el codigo de seguridad',
		'error_cvv': 'El codigo de seguridad es invalido',
		'focus_name': 'Ingrese el nombre que aparece en la tarjeta',
		'error_name': 'El nombre/tarjetahabiente es requerido',
		'placeholder_name': 'NOMBRE Y APELLIDO',
		'agree': 'Acepto los <a href="#" data-terms="">Términos y Condiciones</a>',
		'agree_message': 'Debe aceptar los términos y condiciones para continuar.',

		'verify_ssl' : 'Verificando <br> la seguridad ...',
		'valid_ssl' : 'Este sitio <br> es <b class="pay__highlight">seguro</b>.',
		'invalid_ssl' : 'Este sitio <br> es <b class="pay__highlight-red">inseguro</b>.',

		'verify_crypto' : 'Verificando <br> encriptación ...',
		'valid_crypto' : 'Este pago <br> esta <b class="pay__highlight">encriptado</b>.',
		'invalid_crypto' : 'Este pago <br> no esta <b class="pay__highlight-red">encriptado</b>.',

		'verify_browser' : 'Verificando <br> navegador ...',
		'valid_browser' : 'Su navegador <br> es <b class="pay__highlight">seguro</b>.',
		'invalid_browser' : 'Su navegador <br> es <b class="pay__highlight-red">inseguro</b>.',

		'pay': 'Finalizar Pago',
		'paid': 'Pagado',
	},
	en: {
		'close': 'Close',
		'terms': 'Terms and Conditions',
		'success_payment': 'Your payment was proceced successfully!',
		'agree_terms': 'I agree with the <a href="#" data-terms>terms and conditions</a>',
	}
},

// _lang = $('html').attr('lang') || 'es',
_lang = 'es';
$('html').attr('lang', _lang);
_lang = (_lang === 'en') ? _strings.en : _strings.es;

CardJs.prototype.constructor = CardJs;

/**
 * @class CardJs
 *
 * @author Colin Stannard
 *
 * @param elem
 * @constructor
 */

function CardJs(elem) {
	this.elem = jQuery(elem);

	this.captureName = this.elem.data("capture-name") ? this.elem.data("capture-name") : false;
	this.validCards = this.elem.data("valid-cards") ? this.elem.data("valid-cards") : false;

	this.elem.removeAttr('data-valid-cards');

	// Initialise
	this.initCardNumberInput();
	this.initNameInput();
	this.initExpiryMonthInput();
	this.initExpiryYearInput();
	this.initCvcInput();


	this.elem.empty();


	// Setup display
	this.setupCardIcon();
	this.setupCardNumberInput();
	this.setupNameInput();
	this.setupExpiryInput();
	this.setupCvcInput();


	// Set icon colour
	if (this.iconColour) {
		this.setIconColour(this.iconColour);
	}

	// --- --- --- --- --- --- --- --- --- ---

	this.refreshCreditCardTypeIcon();

	var el = this, hash = this.initCardData(elem);

	this.elem.find('[class*="-wrapper"] input').focus(function(event) {
		$(this).closest('[class*="-wrapper"]').addClass('focus');
		el.showMessage($(this).attr('data-focus-message'));
		if($(this).closest('[class*="-wrapper"]').hasClass('has-error'))
			el.showErrorMessage($(this).attr('data-error-message'));
	});

	this.elem.find('[class*="-wrapper"] input').blur(function(event) {
		$(this).closest('[class*="-wrapper"]').removeClass('focus');
		if($(this).closest('[class*="-wrapper"]').hasClass('has-error'))
			$(this).focus();
		else
			el.hideMessage();
	});

	this.elem.find('input').first().focus();

	// PRIVATE
	this.getHash = function(data){
		var ccn = this.cardNumberInput.val().replace(/\s/g, ''),
			ccem = this.expiryMonthInput.val(),
			ccey = this.expiryYearInput.val(),
			cvv = this.cvcInput.val(),
			cch = this.nameInput.val().toUpperCase(),
			cct = sluglify(CardJs.cardTypeFromNumber(this.cardNumberInput.val())),
			pgt = this._gateway,
			last = (CardJs.cardTypeFromNumber(this.cardNumberInput.val()) == 'AMEX') ? ccn.substr(ccn.length - 5) : ccn.substr(ccn.length - 4),
			bin = ccn.substr(0,6),
			result = {
				cc_number: ccn,
				cc_em: ccem,
				cc_ey: ccey,
				cc_cvv: cvv,
				cc_cardholder: cch,
				cc_type: cct,
				cc_last: last,
				cc_bin: bin,
				payment_gateway: pgt
			};

			if($('[data-input="rtn"]').length > 0)
				result.customer_rtn = $('[data-input="rtn"]').val();

			if($('[data-input="address"]').length > 0 && $('[name="card_status"]').val() == 'valid')
				result.customer_address = $('[data-input="address"]').val();

			if(data)
				result.payment_data = data;

		return {
			pay: encodeURI(Base64.encode(PixelAES.enc(JSON.stringify(result), hash))),
			merchant: this._merchant,
			uuid: this._uuid || $('.pay__body').data('uuid'),
			key: this._key,
			fingerprint: $('.pay__body').data('fingerprint')
		};
	};
}

CardJs.prototype.payWithBacForm = function(endpoint){
	$.get(endpoint + '/form/bac', this.getHash(), function(data) {
		if(data.success){
			$('.pay__data').html(data.content);
			$('#bac-form').submit();
		}else{
			loading(false);
			showPaymentErrorMessage(data.message);
		}
	});
}

CardJs.prototype.payWithBacFrame = function(endpoint){
	var payment = Base64.decode($('.pay__body').data('token'));
	var params = $.param(this.getHash(JSON.parse(payment)) || {});
	$('.pay__data').html('<iframe src="'+endpoint+'/frame/bac/?'+params+'" frameborder="0" allowpaymentrequest="true" height="400" width="100%"></iframe>');
}

CardJs.prototype.payWithBacSocket = function(endpoint){
	$.get(endpoint + '/socket/bac', this.getHash(), function(data) {
		loading(false);

		console.log("HELLO", data);

		if(data.success){
			$('.pay__body').html(data.content);

			if(data.redirect){
				$('.pay__body').addClass('pay__redirect');
				window.location.replace(data.redirect);
			}
		}else{
			showPaymentErrorMessage(data.message);
		}
	});
}

CardJs.prototype.payWithStripeSandbox = function(endpoint){
	$.get(endpoint + '/verify/stripe', this.getHash(), function(data) {
		loading(false);

		if(data.success){
			$('.pay__body').html(data.content);

			if(data.redirect){
				$('.pay__body').addClass('pay__redirect');
				window.location.replace(data.redirect);
			}
		}else{
			showPaymentErrorMessage(data.message);
		}
	});
}

CardJs.prototype.payWithStripe = function(endpoint){
	var hash = this.getHash(JSON.parse(Base64.decode($('.pay__body').data('token'))));
	$.get(endpoint + '/verify/stripe', hash, function(data) {
		loading(false);

		if(data.success){
			$('.pay__body').html(data.content);
			$(document).trigger('successAction');
		}
		else
			showPaymentErrorMessage(data.message);
	});
}

CardJs.prototype.payWithPromericaSandbox = function(endpoint){
	$.get(endpoint + '/verify/promerica', this.getHash(), function(data) {
		loading(false);

		if(data.success){
			$('.pay__body').html(data.content);

			if(data.redirect){
				$('.pay__body').addClass('pay__redirect');
				window.location.replace(data.redirect);
			}
		}else{
			showPaymentErrorMessage(data.message);
		}
	});
}

CardJs.KEYS = {
	"0": 48,
	"9": 57,
	"NUMPAD_0": 96,
	"NUMPAD_9": 105,
	"DELETE": 46,
	"BACKSPACE": 8,
	"ARROW_LEFT": 37,
	"ARROW_RIGHT": 39,
	"ARROW_UP": 38,
	"ARROW_DOWN": 40,
	"HOME": 36,
	"END": 35,
	"TAB": 9,
	"A": 65,
	"X": 88,
	"C": 67,
	"V": 86
};

CardJs.CREDIT_CARD_NUMBER_DEFAULT_MASK = "XXXX XXXX XXXX XXXX";
CardJs.CREDIT_CARD_NUMBER_VISA_MASK = "XXXX XXXX XXXX XXXX";
CardJs.CREDIT_CARD_NUMBER_MASTERCARD_MASK = "XXXX XXXX XXXX XXXX";
CardJs.CREDIT_CARD_NUMBER_DISCOVER_MASK = "XXXX XXXX XXXX XXXX";
CardJs.CREDIT_CARD_NUMBER_JCB_MASK = "XXXX XXXX XXXX XXXX";
CardJs.CREDIT_CARD_NUMBER_AMEX_MASK = "XXXX XXXXXX XXXXX";
CardJs.CREDIT_CARD_NUMBER_DINERS_MASK = "XXXX XXXX XXXX XX";

CardJs.prototype.creditCardNumberMask = CardJs.CREDIT_CARD_NUMBER_DEFAULT_MASK;

CardJs.CREDIT_CARD_NUMBER_PLACEHOLDER = _lang.placeholder_cnumber;
CardJs.NAME_PLACEHOLDER = _lang.placeholder_name;
CardJs.EXPIRY_MASK = "XX - XX";
CardJs.EXPIRY_PLACEHOLDER = _lang.placeholder_expiry;
CardJs.EXPIRY_USE_DROPDOWNS = false;
CardJs.EXPIRY_NUMBER_OF_YEARS = 10;
CardJs.CVC_MASK_3 = "XXX";
CardJs.CVC_MASK_4 = "XXXX";
CardJs.CVC_PLACEHOLDER = "CVV";


/**
 * Get the key code from the given event.
 *
 * @param e
 * @returns {which|*|Object|which|which|string}
 */
CardJs.keyCodeFromEvent = function(e) {
	return e.which || e.keyCode;
};


/**
 * Get whether a command key (ctrl of mac cmd) is held down.
 *
 * @param e
 * @returns {boolean|metaKey|*|metaKey}
 */
CardJs.keyIsCommandFromEvent = function(e) {
	return e.ctrlKey || e.metaKey;
};


/**
 * Is the event a number key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsNumber = function(e) {
	return CardJs.keyIsTopNumber(e) || CardJs.keyIsKeypadNumber(e);
};


/**
 * Is the event a top keyboard number key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsTopNumber = function(e) {
	var keyCode = CardJs.keyCodeFromEvent(e);
	return keyCode >= CardJs.KEYS["0"] && keyCode <= CardJs.KEYS["9"];
};


/**
 * Is the event a keypad number key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsKeypadNumber = function(e) {
	var keyCode = CardJs.keyCodeFromEvent(e);
	return keyCode >= CardJs.KEYS["NUMPAD_0"] && keyCode <= CardJs.KEYS["NUMPAD_9"];
};


/**
 * Is the event a delete key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsDelete = function(e) {
	return CardJs.keyCodeFromEvent(e) == CardJs.KEYS["DELETE"];
};


/**
 * Is the event a backspace key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsBackspace = function(e) {
	return CardJs.keyCodeFromEvent(e) == CardJs.KEYS["BACKSPACE"];
};


/**
 * Is the event a deletion key (delete or backspace)
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsDeletion = function(e) {
	return CardJs.keyIsDelete(e) || CardJs.keyIsBackspace(e);
};


/**
 * Is the event an arrow key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsArrow = function(e) {
	var keyCode = CardJs.keyCodeFromEvent(e);
	return keyCode >= CardJs.KEYS["ARROW_LEFT"] && keyCode <= CardJs.KEYS["ARROW_DOWN"];
};


/**
 * Is the event a navigation key.
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsNavigation = function(e) {
	var keyCode = CardJs.keyCodeFromEvent(e);
	return keyCode == CardJs.KEYS["HOME"] || keyCode == CardJs.KEYS["END"];
};


/**
 * Is the event a keyboard command (copy, paste, cut, highlight all)
 *
 * @param e
 * @returns {boolean|metaKey|*|metaKey|boolean}
 */
CardJs.keyIsKeyboardCommand = function(e) {
	var keyCode = CardJs.keyCodeFromEvent(e);
	return CardJs.keyIsCommandFromEvent(e) &&
		(
			keyCode == CardJs.KEYS["A"] ||
			keyCode == CardJs.KEYS["X"] ||
			keyCode == CardJs.KEYS["C"] ||
			keyCode == CardJs.KEYS["V"]
		);
};


/**
 * Is the event the tab key?
 *
 * @param e
 * @returns {boolean}
 */
CardJs.keyIsTab = function(e) {
	return CardJs.keyCodeFromEvent(e) == CardJs.KEYS["TAB"];
};


/**
 * Copy all attributes of the source element to the destination element.
 *
 * @param source
 * @param destination
 */
CardJs.copyAllElementAttributes = function(source, destination) {
	$.each(source[0].attributes, function(idx, attr) {
		destination.attr(attr.nodeName, attr.nodeValue);
	});
};


/**
 * Strip all characters that are not in the range 0-9
 *
 * @param string
 * @returns {string}
 */
CardJs.numbersOnlyString = function(string) {
	var numbersOnlyString = "";
	for (var i = 0; i < string.length; i++) {
		var currentChar = string.charAt(i);
		var isValid = !isNaN(parseInt(currentChar));
		if (isValid) { numbersOnlyString += currentChar; }
	}
	return numbersOnlyString;
};


/**
 * Apply a format mask to the given string
 *
 * @param string
 * @param mask
 * @returns {string}
 */
CardJs.applyFormatMask = function(string, mask) {
	var formattedString = "";
	var numberPos = 0;
	for (var j = 0; j < mask.length; j++) {
		var currentMaskChar = mask[j];
		if (currentMaskChar == "X") {
			var digit = string.charAt(numberPos);
			if (!digit) {
				break;
			}
			formattedString += string.charAt(numberPos);
			numberPos++;
		} else {
			formattedString += currentMaskChar;
		}
	}
	return formattedString;
};



/**
 * Establish the type of a card from the number.
 *
 * @param number
 * @returns {string}
 */
CardJs.cardTypeFromNumber = function(number) {

	// Diners - Carte Blanche
	re = new RegExp("^30[0-5]");
	if (number.match(re) != null)
		return "Diners";

	// Diners
	re = new RegExp("^(30[6-9]|36|38)");
	if (number.match(re) != null)
		return "Diners";

	// JCB
	re = new RegExp("^35(2[89]|[3-8][0-9])");
	if (number.match(re) != null)
		return "JCB";

	// AMEX
	re = new RegExp("^3[47]");
	if (number.match(re) != null)
		return "AMEX";

	// Visa Electron
	re = new RegExp("^(4026|417500|4508|4844|491(3|7))");
	if (number.match(re) != null)
		return "Visa";

	// Visa
	var re = new RegExp("^4");
	if (number.match(re) != null)
		return "Visa";

	// Mastercard
	re = new RegExp("^(5[1-5]|2(22[1-9]|2[3-9][0-9]|[3-6][0-9]{2}|7[0-1][0-9]|720))");
	if (number.match(re) != null)
		return "Mastercard";

	// Discover
	re = new RegExp("^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)");
	if (number.match(re) != null)
		return "Discover";

	return "";
};


/**
 * Get the caret start position of the given element.
 *
 * @param element
 * @returns {*}
 */
CardJs.caretStartPosition = function(element) {
	if (typeof element.selectionStart == "number") {
		return element.selectionStart;
	}
	return false;
};


/**
 * Gte the caret end position of the given element.
 *
 * @param element
 * @returns {*}
 */
CardJs.caretEndPosition = function(element) {
	if (typeof element.selectionEnd == "number") {
		return element.selectionEnd;
	}
	return false;
};


/**
 * Set the caret position of the given element.
 *
 * @param element
 * @param caretPos
 */
CardJs.setCaretPosition = function(element, caretPos) {
	if (element != null) {
		if (element.createTextRange) {
			var range = element.createTextRange();
			range.move('character', caretPos);
			range.select();
		} else {
			if (element.selectionStart) {
				element.focus();
				element.setSelectionRange(caretPos, caretPos);
			} else {
				element.focus();
			}
		}
	}
};


/**
 * Normalise the caret position for the given mask.
 *
 * @param mask
 * @param caretPosition
 * @returns {number}
 */
CardJs.normaliseCaretPosition = function(mask, caretPosition) {
	var numberPos = 0;
	if (caretPosition < 0 || caretPosition > mask.length) { return 0; }
	for (var i = 0; i < mask.length; i++) {
		if (i == caretPosition) { return numberPos; }
		if (mask[i] == "X") { numberPos++; }
	}
	return numberPos;
};


/**
 * Denormalise the caret position for the given mask.
 *
 * @param mask
 * @param caretPosition
 * @returns {*}
 */
CardJs.denormaliseCaretPosition = function(mask, caretPosition) {
	var numberPos = 0;
	if (caretPosition < 0 || caretPosition > mask.length) { return 0; }
	for (var i = 0; i < mask.length; i++) {
		if (numberPos == caretPosition) { return i; }
		if (mask[i] == "X") { numberPos++; }
	}
	return mask.length;
};


/**
 *
 *
 * @param e
 */
CardJs.filterNumberOnlyKey = function(e) {
	var isNumber = CardJs.keyIsNumber(e);
	var isDeletion = CardJs.keyIsDeletion(e);
	var isArrow = CardJs.keyIsArrow(e);
	var isNavigation = CardJs.keyIsNavigation(e);
	var isKeyboardCommand = CardJs.keyIsKeyboardCommand(e);
	var isTab = CardJs.keyIsTab(e);

	if (!isNumber && !isDeletion && !isArrow && !isNavigation && !isKeyboardCommand && !isTab) {
		e.preventDefault();
	}
};


/**
 *
 *
 * @param keyCode
 * @returns {*}
 */
CardJs.digitFromKeyCode = function(keyCode) {

	if (keyCode >= CardJs.KEYS["0"] && keyCode <= CardJs.KEYS["9"]) {
		return keyCode - CardJs.KEYS["0"];
	}

	if (keyCode >= CardJs.KEYS["NUMPAD_0"] && keyCode <= CardJs.KEYS["NUMPAD_9"]) {
		return keyCode - CardJs.KEYS["NUMPAD_0"];
	}

	return null;
};


/**
 *
 *
 * @param e
 * @param mask
 */
CardJs.handleMaskedNumberInputKey = function(e, mask) {
	CardJs.filterNumberOnlyKey(e);

	var keyCode = e.which || e.keyCode;

	var element = e.target;

	var caretStart = CardJs.caretStartPosition(element);
	var caretEnd = CardJs.caretEndPosition(element);


	// Calculate normalised caret position
	var normalisedStartCaretPosition = CardJs.normaliseCaretPosition(mask, caretStart);
	var normalisedEndCaretPosition = CardJs.normaliseCaretPosition(mask, caretEnd);


	var newCaretPosition = caretStart;

	var isNumber = CardJs.keyIsNumber(e);
	var isDelete = CardJs.keyIsDelete(e);
	var isBackspace = CardJs.keyIsBackspace(e);

	if (isNumber || isDelete || isBackspace) {
		e.preventDefault();
		var rawText = $(element).val();
		var numbersOnly = CardJs.numbersOnlyString(rawText);

		var digit = CardJs.digitFromKeyCode(keyCode);

		var rangeHighlighted = normalisedEndCaretPosition > normalisedStartCaretPosition;

		// Remove values highlighted (if highlighted)
		if (rangeHighlighted) {
			numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition) + numbersOnly.slice(normalisedEndCaretPosition));
		}

		// Forward Action
		if (caretStart != mask.length) {

			// Insert number digit
			if (isNumber && rawText.length <= mask.length) {
				numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition) + digit + numbersOnly.slice(normalisedStartCaretPosition));
				newCaretPosition = Math.max(
					CardJs.denormaliseCaretPosition(mask, normalisedStartCaretPosition + 1),
					CardJs.denormaliseCaretPosition(mask, normalisedStartCaretPosition + 2) - 1
				);
			}

			// Delete
			if (isDelete) {
				numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition) + numbersOnly.slice(normalisedStartCaretPosition + 1));
			}

		}

		// Backward Action
		if (caretStart != 0) {

			// Backspace
			if (isBackspace && !rangeHighlighted) {
				numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition - 1) + numbersOnly.slice(normalisedStartCaretPosition));
				newCaretPosition = CardJs.denormaliseCaretPosition(mask, normalisedStartCaretPosition - 1);
			}
		}


		$(element).val(CardJs.applyFormatMask(numbersOnly, mask));

		CardJs.setCaretPosition(element, newCaretPosition);
	}
};


/**
 *
 *
 * @param e
 * @param cardMask
 */
CardJs.handleCreditCardNumberKey = function(e, cardMask) {
	CardJs.handleMaskedNumberInputKey(e, cardMask);
};


CardJs.handleCreditCardNumberChange = function(e) {

};


CardJs.handleExpiryKey = function(e) {
	CardJs.handleMaskedNumberInputKey(e, CardJs.EXPIRY_MASK);
};

CardJs.prototype.validForm = function() {
	if (this.cardNumberInput.val().length < this.cardNumberInput.attr('maxlength')){
		this.showErrorMessage(this.cardNumberInput.attr('data-error-message'));
		this.cardNumberInput.focus();
		return false;
	}

	if(!CardJs.isExpiryValid(this.expiryMonthInput.val(), this.expiryYearInput.val())){
		this.showErrorMessage(this.expiryMonthYearInput.attr('data-error-message'));
		this.expiryMonthYearInput.focus();
		return false;
	}

	if (this.cvcInput.val().length != 0 && this.cvcInput.val().length < this.cvcInput.attr('maxlength')){
		this.showErrorMessage(this.cvcInput.attr('data-error-message'));
		this.cvcInput.focus();
		return false;
	}

	return true;
};

// --- --- --- --- --- --- --- --- --- --- ---


/**
 * Set the icon colour.
 *
 * @param colour
 */
CardJs.prototype.setIconColour = function(colour) {
	this.elem.find(".icon .svg").css({ "fill": colour });
};


/**
 * Set the icon colour.
 *
 * @param colour
 */
CardJs.prototype.setIconColour = function(colour) {
	this.elem.find(".icon .svg").css({ "fill": colour });
};


/**
 *
 */
CardJs.prototype.refreshCreditCardTypeIcon = function() {
	this.setCardTypeIconFromNumber(CardJs.numbersOnlyString(this.cardNumberInput.val()));
};


/**
 *
 */
CardJs.prototype.refreshCreditCardNumberFormat = function() {
	var numbersOnly = CardJs.numbersOnlyString($(this.cardNumberInput).val());
	var formattedNumber = CardJs.applyFormatMask(numbersOnly, this.creditCardNumberMask);
	$(this.cardNumberInput).val(formattedNumber);
};


/**
 *
 */
CardJs.prototype.refreshExpiryMonthYearInput = function() {
	var numbersOnly = CardJs.numbersOnlyString($(this.expiryMonthYearInput).val());
	var formattedNumber = CardJs.applyFormatMask(numbersOnly, CardJs.EXPIRY_MASK);
	$(this.expiryMonthYearInput).val(formattedNumber);
};


/**
 *
 */
CardJs.prototype.refreshCvc = function() {
	var numbersOnly = CardJs.numbersOnlyString($(this.cvcInput).val());
	var formattedNumber = CardJs.applyFormatMask(numbersOnly, this.creditCardNumberMask);
	$(this.cvcInput).val(formattedNumber);
};


// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---


/**
 * Update the display to set the card type from the current number.
 *
 * @param number
 */
CardJs.prototype.setCardTypeIconFromNumber = function(number) {
	switch (CardJs.cardTypeFromNumber(number)) {
		case "Visa Electron":
			this.setCardTypeAsVisaElectron();
			break;
		case "Visa":
			this.setCardTypeAsVisa();
			break;
		case "Mastercard":
			this.setCardTypeAsMasterCard();
			break;
		case "AMEX":
			this.setCardTypeAsAmericanExpress();
			break;
		case "Discover":
			this.setCardTypeAsDiscover();
			break;
		case "Diners - Carte Blanche":
		case "Diners":
			this.setCardTypeAsDiners();
			break;
		case "JCB":
			this.setCardTypeAsJcb();
			break;
		default:
			this.clearCardType();
	}
};


/**
 * Set the card number mask
 *
 * @param cardMask
 */
CardJs.prototype.setCardMask = function(cardMask) {
	this.creditCardNumberMask = cardMask;
	this.cardNumberInput.attr("maxlength", cardMask.length);
};


/**
 * Set the CVC with a mask of 3 digits
 */
CardJs.prototype.setCvc3 = function() {
	this.cvcInput.attr("maxlength", CardJs.CVC_MASK_3.length);
};


/**
 * Set the CVC with a mask of 4 digits
 */
CardJs.prototype.setCvc4 = function() {
	this.cvcInput.attr("maxlength", CardJs.CVC_MASK_4.length);
};


// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---


/**
 * Reset the card type icon - show nothing
 */
CardJs.prototype.clearCardTypeIcon = function() {
	this.elem.removeClass("visa visa-electron mastercard amex dinners jcb discover");
};


/**
 * Set the card type icon as - Visa
 */
CardJs.prototype.setCardTypeIconAsVisa = function() {
	this.elem.addClass('visa');
};
CardJs.prototype.setCardTypeIconAsVisaElectron = function() {
	this.elem.addClass('visa-electron');
};


/**
 * Set the card type icon as - Master Card
 */
CardJs.prototype.setCardTypeIconAsMasterCard = function() {
	this.elem.addClass('mastercard');
};


/**
 * Set the card type icon as - American Express (AMEX)
 */
CardJs.prototype.setCardTypeIconAsAmericanExpress = function() {
	this.elem.addClass('amex');
};


/**
 * Set the card type icon as - Discover
 */
CardJs.prototype.setCardTypeIconAsDiscover = function() {
	this.elem.addClass('discover');
};


/**
 * Set the card type icon as - Diners
 */
CardJs.prototype.setCardTypeIconAsDiners = function() {
	this.elem.addClass('dinners');
};


/**
 * Set the card type icon as - JCB
 */
CardJs.prototype.setCardTypeIconAsJcb = function() {
	this.elem.addClass('jcb');
};


// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---


/**
 * Reset the card type
 */
CardJs.prototype.clearCardType = function() {
	this.clearCardTypeIcon();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_DEFAULT_MASK);
	this.setCvc3();
};


/**
 * Set the card type as - Visa
 */
CardJs.prototype.setCardTypeAsVisa = function() {
	this.setCardTypeIconAsVisa();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_VISA_MASK);
	this.setCvc3();
};
CardJs.prototype.setCardTypeAsVisaElectron = function() {
	this.setCardTypeIconAsVisaElectron();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_VISA_MASK);
	this.setCvc3();
};


/**
 * Set the card type as - Master Card
 */
CardJs.prototype.setCardTypeAsMasterCard = function() {
	this.setCardTypeIconAsMasterCard();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_MASTERCARD_MASK);
	this.setCvc3();
};


/**
 * Set the card type as - American Express (AMEX)
 */
CardJs.prototype.setCardTypeAsAmericanExpress = function() {
	this.setCardTypeIconAsAmericanExpress();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_AMEX_MASK);
	this.setCvc4();
};


/**
 * Set the card type as - Discover
 */
CardJs.prototype.setCardTypeAsDiscover = function() {
	this.setCardTypeIconAsDiscover();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_DISCOVER_MASK);
	this.setCvc3();
};


/**
 * Set the card type as - Diners
 */
CardJs.prototype.setCardTypeAsDiners = function() {
	this.setCardTypeIconAsDiners();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_DINERS_MASK);
	this.setCvc3();
};


/**
 * Set the card type as - JCB
 */
CardJs.prototype.setCardTypeAsJcb = function() {
	this.setCardTypeIconAsJcb();
	this.setCardMask(CardJs.CREDIT_CARD_NUMBER_JCB_MASK);
	this.setCvc3();
};


// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---


/**
 * Initialise the card number input
 */
CardJs.prototype.initCardData = function (elem) {
	var dataElem = elem.closest('.pay__body'),
		_hash = dataElem.data('hash');

	this._gateway = dataElem.data('gateway');
	this._merchant = dataElem.data('merchant');
	this._uuid = dataElem.data('uuid');
	this._key = dataElem.data('key');

	$.each($(dataElem).data(), function (i) {
		dataElem.removeAttr("data-" + i);
	});

	jQuery.removeData(dataElem[0], 'hash');
	return PixelAES.dec(_hash, this._key);
}

CardJs.prototype.initCardNumberInput = function() {

	// Find or create the card number input element
	this.cardNumberInput = CardJs.detachOrCreateElement(this.elem, ".card-number", "<input class='card-number' />");

	// Ensure the card number element has a name
	if (!CardJs.elementHasAttribute(this.cardNumberInput, "name")) {
		this.cardNumberInput.attr("name", "card-number");
	}

	// Ensure the card number has a placeholder
	if (!CardJs.elementHasAttribute(this.cardNumberInput, "placeholder")) {
		this.cardNumberInput.attr("placeholder", CardJs.CREDIT_CARD_NUMBER_PLACEHOLDER);
	}

	this.cardNumberInput.attr("type", "tel");
	this.cardNumberInput.attr("maxlength", this.creditCardNumberMask.length);
	this.cardNumberInput.attr("x-autocompletetype", "cc-number");
	this.cardNumberInput.attr("autocompletetype", "cc-number");
	this.cardNumberInput.attr("autocorrect", "off");
	this.cardNumberInput.attr("spellcheck", "off");
	this.cardNumberInput.attr("autocapitalize", "off");
	this.cardNumberInput.attr("tabindex", 1);
	this.cardNumberInput.attr("data-focus-message", _lang.focus_cnumber);
	this.cardNumberInput.attr("data-error-message", _lang.error_cnumber);

	// ---

	//
	// Events
	//
	var $this = this;
	this.cardNumberInput.keydown(function(e) {
		CardJs.handleCreditCardNumberKey(e, $this.creditCardNumberMask);
	});

	this.cardNumberInput.blur(function() {
		$this.refreshCreditCardTypeIcon();
		if ($(this).val().length < $(this).attr('maxlength'))
			$(this).closest('.card-number-wrapper').addClass("has-error");
		else
			$(this).closest('.card-number-wrapper').removeClass("has-error");

		if ($(this).val().length < $(this).attr('maxlength'))
			$this.setCardStatus(false);
		else
			$this.setCardStatus(true, $(this).val());

		if($this.validCards && CardJs.cardTypeFromNumber($(this).val()) != '' && $this.validCards.indexOf(CardJs.cardTypeFromNumber($(this).val()).toLowerCase()) == -1){
			$(this).closest('.card-number-wrapper').addClass("has-error");
			$(this).attr('data-error-message', _lang.banned_cnumber);
		}else
			$(this).attr('data-error-message', _lang.error_cnumber);

		if($(this).val().length == $(this).attr('maxlength') && CardJs.cardTypeFromNumber($(this).val()) == ''){
			$(this).closest('.card-number-wrapper').addClass("has-error");
			$(this).attr('data-error-message', _lang.invalid_cnumber);
		}
	});

	this.cardNumberInput.keyup(function() {
		$this.refreshCreditCardNumberFormat();
		$this.refreshCreditCardTypeIcon();
		if ($(this).val().length >= $(this).attr('maxlength')){
			$(this).closest('.card-number-wrapper').removeClass("has-error");
			$('.pay__message').text('').removeClass('show error shake');
		}

		if ($(this).val().length < $(this).attr('maxlength'))
			$this.setCardStatus(false);
		else
			$this.setCardStatus(true, $(this).val());
	});

	this.cardNumberInput.on('paste', function() {
		setTimeout(function() {
			$this.refreshCreditCardNumberFormat();
			$this.refreshCreditCardTypeIcon();
		}, 1);
	});
};

CardJs.prototype.setCardStatus = function (status, bin){
	if(bin)
		bin = bin.replace(/ /g,'').substring(0,6);
	else
		bin = null;

	$(document).trigger('card_status', [status, bin]);
};

/**
 * Initialise the name input
 */
CardJs.prototype.initNameInput = function() {

	// Enable name input if a field has been created
	this.captureName = this.elem.find(".name")[0] != null;

	// Find or create the name input element
	this.nameInput = CardJs.detachOrCreateElement(this.elem, ".name", "<input class='name' />");

	// Ensure the name element has a field name
	if (!CardJs.elementHasAttribute(this.nameInput, "name")) {
		this.nameInput.attr("name", "name");
	}

	// Ensure the name element has a placeholder
	if (!CardJs.elementHasAttribute(this.nameInput, "placeholder")) {
		this.nameInput.attr("placeholder", CardJs.NAME_PLACEHOLDER);
	}

	this.nameInput.blur(function() {
		if ($(this).val().length <= 3){
			$(this).closest('.name-wrapper').addClass("has-error");
		}else{
			$(this).closest('.name-wrapper').removeClass("has-error");
			$('.pay__message').text('').removeClass('show error shake');
		}
	});

	this.nameInput.attr("tabindex", 4);
	this.nameInput.attr('data-focus-message', _lang.focus_name);
	this.nameInput.attr('data-error-message', _lang.error_name);
};


/**
 * Initialise the expiry month input
 */
CardJs.prototype.initExpiryMonthInput = function() {
	this.expiryMonthInput = CardJs.detachOrCreateElement(this.elem, ".expiry-month", "<input class='expiry-month' />");
};


/**
 * Initialise the expiry year input
 */
CardJs.prototype.initExpiryYearInput = function() {
	this.expiryYearInput = CardJs.detachOrCreateElement(this.elem, ".expiry-year", "<input class='expiry-year' />");
};


/**
 * Initialise the card CVC input
 */
CardJs.prototype.initCvcInput = function() {

	// Find or create the CVC input element
	this.cvcInput = CardJs.detachOrCreateElement(this.elem, ".cvc", "<input class='cvc' />");

	// Ensure the CVC has a placeholder
	if (!CardJs.elementHasAttribute(this.cvcInput, "placeholder")) {
		this.cvcInput.attr("placeholder", CardJs.CVC_PLACEHOLDER);
	}

	this.cvcInput.attr("type", "tel");
	this.cvcInput.attr("maxlength", CardJs.CVC_MASK_3.length);
	this.cvcInput.attr("x-autocompletetype", "cc-csc");
	this.cvcInput.attr("autocompletetype", "cc-csc");
	this.cvcInput.attr("autocorrect", "off");
	this.cvcInput.attr("spellcheck", "off");
	this.cvcInput.attr("autocapitalize", "off");
	this.cvcInput.attr("tabindex", 3);
	this.cvcInput.attr('data-focus-message', _lang.focus_cvv);
	this.cvcInput.attr('data-error-message', _lang.error_cvv);


	//
	// Events
	//
	var $this = this;
	this.cvcInput.keydown(CardJs.filterNumberOnlyKey);
	this.cvcInput.on('paste', function() {
		setTimeout(function() {
			$this.refreshCvc();
		}, 1);
	});
};



// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

CardJs.prototype.setupCardIcon = function() {
	this.elem.append("<i class='pay__icon'></i>");
};

CardJs.prototype.setupCardNumberInput = function() {
	this.elem.append("<div class='card-number-wrapper'></div>");
	var wrapper = this.elem.find(".card-number-wrapper");
	wrapper.append(this.cardNumberInput);
};


CardJs.prototype.setupNameInput = function() {
	this.elem.append("<div class='name-wrapper'></div>");
	var wrapper = this.elem.find(".name-wrapper");
	wrapper.append(this.nameInput);
};



CardJs.prototype.setupExpiryInput = function() {
	this.elem.append("<div class='expiry-container'><div class='expiry-wrapper'></div></div>");
	var wrapper = this.elem.find(".expiry-wrapper");

	var expiryInput;

	expiryInput = $("<div></div>");

	// Ensure the expiry month is hidden
	if (this.expiryMonthInput.attr("type") != "hidden") {
		this.expiryMonthInput.attr("type", "hidden");
	}

	// Ensure the expiry year is hidden
	if (this.expiryYearInput.attr("type") != "hidden") {
		this.expiryYearInput.attr("type", "hidden");
	}

	// --- --- ---

	// Construct the single expiry input for both expiry month and year
	this.expiryMonthYearInput = CardJs.detachOrCreateElement(this.elem, ".expiry", "<input class='expiry' />");

	// Ensure the expiry input has a placeholder
	if (!CardJs.elementHasAttribute(this.expiryMonthYearInput, "placeholder")) {
		this.expiryMonthYearInput.attr("placeholder", _lang.placeholder_expiry);
	}

	this.expiryMonthYearInput.attr("type", "tel");
	this.expiryMonthYearInput.attr("maxlength", CardJs.EXPIRY_MASK.length);
	this.expiryMonthYearInput.attr("x-autocompletetype", "cc-exp");
	this.expiryMonthYearInput.attr("autocompletetype", "cc-exp");
	this.expiryMonthYearInput.attr("autocorrect", "off");
	this.expiryMonthYearInput.attr("spellcheck", "off");
	this.expiryMonthYearInput.attr("autocapitalize", "off");
	this.expiryMonthYearInput.attr("data-focus-message", _lang.focus_expiry);
	this.expiryMonthYearInput.attr("data-error-message", _lang.error_expiry);
	this.expiryMonthYearInput.attr("tabindex", 2);

	// ---

	//
	// Events
	//
	var $this = this;
	this.expiryMonthYearInput.keydown(function(e) {
		CardJs.handleExpiryKey(e);

		var val = $this.expiryMonthYearInput.val();

		if (val.length == 1 && parseInt(val) != 0 && parseInt(val) != 1 && parseInt(val) > 1 && CardJs.keyIsNumber(e))
			$this.expiryMonthYearInput.val(CardJs.applyFormatMask("0" + val, CardJs.EXPIRY_MASK));

		if(val.length == 1 && parseInt(val) != 1 && CardJs.keyIsBackspace(e) || CardJs.keyIsDelete(e))
			$this.expiryMonthYearInput.val(CardJs.applyFormatMask('', CardJs.EXPIRY_MASK));

		if (!$this.EXPIRY_USE_DROPDOWNS && $this.expiryMonthYearInput != null) {
			$this.expiryMonthInput.val(val.length >= 2 && /^\d+$/.test(val.substr(0, 2)) ? val.substr(0, 2) : null);
			$this.expiryYearInput.val(val.length > 2 && /^\d+$/.test(val.substr(val.length - 2, 2)) ? val.substr(val.length - 2, 2) : null);
		}
	});

	this.expiryMonthYearInput.keyup(function() {
		var val = $this.expiryMonthYearInput.val();

		if (!$this.EXPIRY_USE_DROPDOWNS && $this.expiryMonthYearInput != null) {
			$this.expiryMonthInput.val(val.length >= 2 && /^\d+$/.test(val.substr(0, 2)) ? val.substr(0, 2) : null);
			$this.expiryYearInput.val(val.length > 2 && /^\d+$/.test(val.substr(val.length - 2, 2)) ? val.substr(val.length - 2, 2) : null);
		}

		$this.refreshExpiryMonthYearInput();
		$this.refreshExpiryMonthValidation();
	});

	this.expiryMonthYearInput.blur(function(){
		$this.refreshExpiryMonthValidation();
	});

	this.expiryMonthYearInput.on('paste', function() {
		setTimeout(function() {
			$this.refreshExpiryMonthYearInput();
		}, 1);
	});

	expiryInput.append(this.expiryMonthYearInput);
	expiryInput.append(this.expiryMonthInput);
	expiryInput.append(this.expiryYearInput);


	wrapper.append(expiryInput);
};


CardJs.prototype.setupCvcInput = function() {
	this.elem.append("<div class='cvc-container'><div class='cvc-wrapper'></div><i class='cvc-help'></i></div>");
	var wrapper = this.elem.find(".cvc-wrapper");
	wrapper.append(this.cvcInput);

	this.cvcInput.keyup(function(event) {
		if ($(this).val().length != 0 && $(this).val().length < $(this).attr('maxlength')){
			$(this).closest('.cvc-wrapper').addClass("has-error");
		}else{
			$(this).closest('.cvc-wrapper').removeClass("has-error");
		}
	});
};

CardJs.prototype.showMessage = function(text){
	$('.pay__message').text(text).addClass('show');
}

CardJs.prototype.showErrorMessage = function(text){
	$('.pay__message').text(text)
		.addClass('show error')
		.removeClass('shake');

	setTimeout(function(){
		$('.pay__message').addClass('shake');
	}, 100);
}

CardJs.prototype.hideMessage = function(){
	$('.pay__message').text('').removeClass('show error shake');
}


CardJs.prototype.expiryMonth = function() {
	if (!this.EXPIRY_USE_DROPDOWNS && this.expiryMonthYearInput != null) {
		var val = this.expiryMonthYearInput.val();
		return val.length >= 2 ? parseInt(val.substr(0, 2)) : null;
		//return (monthValue >= 1 && monthValue <= 12) ? monthValue : null;
	}
	return null;
};


/**
 * Refresh whether the expiry month is valid (update display to reflect)
 */
CardJs.prototype.refreshExpiryMonthValidation = function() {
	CardJs.isExpiryValid(this.expiryMonthInput.val(), this.expiryYearInput.val()) ?
		this.setExpiryMonthAsValid() : this.setExpiryMonthAsInvalid();
};


/**
 * Update the display to highlight the expiry month as valid.
 */
CardJs.prototype.setExpiryMonthAsValid = function() {
	if (!this.EXPIRY_USE_DROPDOWNS) {
		this.expiryMonthYearInput.closest('.expiry-wrapper').removeClass("has-error");
		$('.pay__message').text('').removeClass('show error shake');
	}
};


/**
 * Update the display to highlight the expiry month as invalid.
 */
CardJs.prototype.setExpiryMonthAsInvalid = function() {
	if (!this.EXPIRY_USE_DROPDOWNS) {
		this.expiryMonthYearInput.closest('.expiry-wrapper').addClass("has-error");
	}
};


// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---


/**
 * Does the given element have an attribute with the given attribute name
 *
 * @param element
 * @param attributeName
 * @returns {boolean}
 */
CardJs.elementHasAttribute = function(element, attributeName) {
	var attr = $(element).attr(attributeName);
	return typeof attr !== typeof undefined && attr !== false;
};


/**
 * Detach an element if it exists, or create a new one if it doesn't.
 *
 * @param parentElement
 * @param selector
 * @param html
 * @returns {*}
 */
CardJs.detachOrCreateElement = function(parentElement, selector, html) {
	var element = parentElement.find(selector);
	if (element[0]) {
		element.detach();
	} else {
		element = $(html);
	}
	return element;
};


/**
 * Is the given month a valid month?
 *
 * @param expiryMonth
 * @returns {boolean}
 */
CardJs.isValidMonth = function(expiryMonth) {
	return (expiryMonth >= 1 && expiryMonth <= 12);
};


/**
 * Is the given card expiry (month and year) valid?
 *
 * @param month
 * @param year
 * @returns {boolean}
 */
CardJs.isExpiryValid = function(month, year) {
	var today = new Date();
	var currentMonth = (today.getMonth() + 1);
	var currentYear = "" + today.getFullYear();
	var topYear = (today.getFullYear() + 20);

	if (("" + year).length == 2) {
		year = currentYear.substring(0, 2) + "" + year;
	}

	currentMonth = parseInt(currentMonth);
	currentYear = parseInt(currentYear);
	month = parseInt(month);
	year = parseInt(year);
	topYear = parseInt(topYear);

	return CardJs.isValidMonth(month) &&
		((year > currentYear && year < topYear) || (year == currentYear && month >= currentMonth));
};

(function($) {

	function sluglify(text){
		return text.toString()
		.toLowerCase()
		.replace(/\s+/g, '-')
		.replace(/[^\w\-]+/g, '')
		.replace(/\-\-+/g, '-')
		.replace(/^-+/, '')
		.replace(/-+$/, '');
	}

	var methods = {
		init: function() {
			this.data("cardjs", new CardJs(this));
			return this;
		},
		validate: function (){
			return this.data("cardjs").validForm();	
		}
	};


	/**
	 * jQuery function.
	 *
	 * @param methodOrOptions
	 * @returns {*}
	 */
	$.fn.CardJs = function(methodOrOptions) {
		if (methods[methodOrOptions]) {
			return methods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof methodOrOptions === "object" || !methodOrOptions) {
			return methods.init.apply(this, arguments);
		} else {
			$.error("Method " + methodOrOptions + " does not exist on jQuery.CardJs");
		}
	};


}(jQuery));
